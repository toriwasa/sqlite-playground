# Project Guidelines

## 技術スタック
- プログラミング言語: Golang
- DB: SQLite

## ディレクトリ構成
- 不要なディレクトリを作成しないように注意してください

```txt
.
├ main.go  // アプリケーションのエントリーポイント
└ internal
     ├ domain
     │    └ models  // ドメインモデルの構造体を定義
     ├ infrastructures
     │    ├ file  // ファイルの読み書き処理を定義
     │    ├ db    // DBの読み書き処理を定義
     │    └ api   // APIの読み書き処理を定義
     ├ usecase  // ビジネスロジック処理を定義
     ├ controller  // ビジネスロジック処理を呼び出すコントローラー処理を定義
     └ handler
          ├ cui  // CUIで実行時のパラメータを受け取りコントローラー処理を呼び出す処理を定義
          └ api  // Web APIで実行時のパラメータを受け取りコントローラー処理を呼び出す処理を定義
```

## コード規約
- Go の標準ライブラリを利用してください
- 関数や引数、変数や定数は内容が明示的になるように名前を付けてください
- 構造体を定義するコードは domain/models パッケージを参考にして定義してください
- 関数を定義する際は引数と返り値の内容、処理内容を説明するコメントを記述してください
- 複雑な処理は、処理結果を説明する名前を持つ変数に代入して処理を分割してください
- コード内のリテラル値は定数としてファイルの先頭に定義してください

## アーキテクチャ
- domain/models 層に定義された models パッケージの構造体を利用してファイルやDBやAPIのデータを読み書きする公開関数を infrastructures パッケージに定義してください
- infrastructures パッケージの読み込み公開関数は、ファイルやDBやAPIのレコードを models パッケージの構造体に変換して返却するだけで、ビジネスロジックを含んではいけません
- infrastructures パッケージの書き込み公開関数は、models パッケージの構造体をファイルやDBやAPIのレコードに変換して書き込むだけで、ビジネスロジックを含んではいけません
- models パッケージの構造体を利用するビジネスロジック処理を usecase 層の公開関数に定義してください
- usecase 層の公開関数は関数型プログラミングの考え方に基づいて、副作用のない純粋関数になるように設計してください
- infrastructure パッケージや usecase パッケージの公開関数を続けて呼び出すコントローラー層の公開関数を controller パッケージに定義してください
- CUIで実行時のパラメータを受け取りコントローラー層の公開関数を呼び出す公開関数を handler/cui 層の cui パッケージに定義してください
- Web APIで実行時のパラメータを受け取りコントローラー層の公開関数を呼び出す公開関数を handler/api 層の api パッケージに定義してください
- 公開関数の処理を別の関数に分割する場合は、分割した関数は非公開関数にしてください

## 単体テスト作成方針
- usecase パッケージのビジネスロジック公開関数に対して単体テストコードを記述して動作確認してください
- テストコードはテスト対象の関数と同じパッケージに配置してください
- テストコードはテスト対象の関数と同じファイル名に _test.go を付けてください
- 単体テストコードは Arrange, Act, Assert の 3 つのセクションに分けて記述してください
- Arrange セクションでは、テスト対象の関数に渡す引数や期待値を定義してください
- Act セクションでは、テスト対象の関数を呼び出して実行してください
- Assert セクションでは、Act セクションで実行した結果が期待値と一致するかを検証してください
- テスト関数は func Testテストケース名(t *testing.T) の形式で定義してください
- テストケース名は期待するビジネスルールを示す名前にしてください
